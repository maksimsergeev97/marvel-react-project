{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/form/Form.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getCharacterByName","name","res","charName","results","map","_transformaSingleCharacter","getAllCharacters","_ref2","_callee2","offset","_args2","_context2","_transformCharacter","getOneCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","thumbnail","path","extension","slice","homepage","urls","wiki","comics","items","_comics$textObject","title","price","prices","pageCount","language","textObject","View","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","onCharLoaded","useEffect","updateChar","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","chars","setChars","newItemLoading","setNewItemLoading","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharsLoaded","newChars","ended","_toConsumableArray","itemsRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","imgStyle","i","CSSTransition","classNames","timeout","tabIndex","ref","el","onCharSelected","onKeyUp","e","key","TransitionGroup","component","Content","disabled","Skeleton","_Fragment","Link","to","link","resourceURI","lastIndexOf","CharInfo","charId","skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","err","errInfo","console","log","this","setState","Component","Form","_errors$charName","_useForm","useForm","register","handleSubmit","errors","formState","findChar","onChar","onSubmit","_objectSpread","placeholder","required","type","MainPage","selectedChar","changePageUrl","setPageUrl","window","location","Helmet","decoration"],"mappings":"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","file":"static/js/4.36701ce7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1b431546c9862750583ab94f838ae125';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name.charName}&${_apiKey}`);\r\n        return res.data.results.map(_transformaSingleCharacter);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getOneCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformaSingleCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,181)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not avaible',\r\n            id: comics.id,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObject?.language || 'en-us'\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getOneCharacter, getCharacterByName, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n    \r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            setProcess('confirmed');\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n    return {loading, request, error, clearError, process};\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getOneCharacter, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    // useEffect(() => {\n    //     const intervalId = setInterval(updateChar, 3000);\n        \n    //     return () => {\n    //         clearInterval(intervalId)\n    //     }\n    // }, [])\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getOneCharacter(id)\n            .then(onCharLoaded);\n    };\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char\n    let objectFit = null;\n    thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? objectFit = \"contain\" : objectFit = \"cover\"\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={{objectFit: objectFit}} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n    } \n\n    const onCharsLoaded = (newChars) => {\n        let ended = false;\n        if(newChars.length < 9) {\n            ended = true;\n        }\n\n        setChars(chars => [...chars, ...newChars]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n    \n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        itemsRefs.current[id].focus();\n    }\n\n    function Content(chars) {\n\n        let imgStyle = null;\n        const items = chars.map((item,i) => {\n            item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? imgStyle = 'contain' : imgStyle = 'unset';\n\n            return (\n                <CSSTransition classNames=\"char__item\" key={item.id} timeout={500}> \n                    <li tabIndex={0} ref={el => itemsRefs.current[i] = el} className=\"char__item\" \n                        onClick={() => {\n                        props.onCharSelected(item.id); \n                        focusOnItem(i);\n                        }}\n                        onKeyUp={(e) => {\n                            if(e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id); \n                                focusOnItem(i)\n                            } \n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={{objectFit: imgStyle}}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n        const items = Content(chars);\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                    className=\"button button__main button__long\" \n                    onClick={() => onRequest(offset)}\n                    disabled={newItemLoading}\n                    style={{display: charEnded ? 'none' : 'block'}}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport PropTypes, { number } from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n   \n    const [char, setChar] = useState(null);\n\n    const {loading, error, getOneCharacter, clearError} = useMarvelService();\n   \n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n\n        clearError();\n        getOneCharacter(charId).then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n   \n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    \n    return (\n        <div className=\"char__info\">\n        {skeleton}\n        {errorMessage}\n        {spinner}\n        {content}\n        </div>\n    )\n}\n\nconst comicsLink = (link) => {\n    const newLink = link.slice(link.lastIndexOf('/') + 1);\n    return newLink;\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n    let objectFit = null;\n    objectFit = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? \"contain\" : \"unset\"\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={{objectFit: objectFit}}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics for this character'}\n                {\n                    comics.map((item, i) => {\n                        if(i < 10) {\n                            return (\n                                <Link to={`/marvel-react-project/comics/${comicsLink(item.resourceURI)}`} key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </Link>\n                            )\n                        }                     \n                    })\n                }    \n            </ul>\n        </>\n    )\n} \n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n    \r\n    componentDidCatch(err, errInfo) {\r\n        console.log(err, errInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children; \r\n    }\r\n}   \r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport './form.scss';\r\n\r\nconst Form = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { register, handleSubmit, formState: { errors } } = useForm();\r\n    const onSubmit = data => findChar(data);\r\n\r\n    const {loading, getCharacterByName} = useMarvelService();\r\n\r\n    const findChar = (name) => {\r\n        getCharacterByName(name).then(onChar);\r\n    }\r\n\r\n    const onChar = (char) => {\r\n       setChar(char)\r\n    }\r\n\r\n    const Content = (props) => {\r\n        if (props.char === null) {\r\n           return null\r\n        } else if (props.char && props.char.length > 0) {\r\n            return (\r\n                <div className=\"find-char\">\r\n                <span className=\"done\">There is! Visit {props.char[0].name} page?</span>\r\n                <Link className=\"button button__secondary\" to={`/marvel-react-project/char/${props.char[0].id}`}>\r\n                    <div className=\"inner\">TO PAGE</div>\r\n                </Link>\r\n            </div>\r\n            )\r\n        } else {\r\n           return (<div className=\"error\">The character was not found. Check the name and try again</div>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className='form' onSubmit={handleSubmit(onSubmit)}>\r\n            <label className=\"form-title\" >Or find a character by name:</label>\r\n            <input className=\"form-input\" placeholder=\"Enter name\" {...register(\"charName\", {\r\n                required: true,\r\n            })}/>\r\n            <button className='button button__main' type=\"submit\" disabled={loading}>\r\n                <div className=\"inner\">FIND</div>\r\n            </button>\r\n            {errors?.charName?.type === \"required\" ? <p className=\"error\">This field is required</p> : <Content char={char}/>}\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useEffect, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport Form from \"../form/Form\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = (props) => {\r\n    \r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    useEffect(() => {\r\n        changePageUrl()\r\n    }, [])\r\n\r\n    const changePageUrl = () => {\r\n        props.setPageUrl(window.location.href)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                    <Form/>\r\n                </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default MainPage;"],"sourceRoot":""}